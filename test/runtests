#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright (c) 2017, Joyent, Inc.
#

#
# Run the node-sdc-clients tests in a running SDC.
#
# Run `./runtests -h` for usage info.
#

if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail


#---- support stuff

function fatal
{
    echo "$0: fatal error: $*"
    exit 1
}

function errexit
{
    [[ $1 -ne 0 ]] || exit 0
    fatal "error exit status $1"
}

function usage
{
    echo "Usage:"
    echo "  ./runtests [OPTIONS...]"
    echo ""
    echo "Options:"
    echo "  -h           Print this help and exit."
    echo "  -f FILTER    Filter pattern (substring match) for test files to run."
    echo "  -H HEADNODE  If given, then attempt to run the tests against a DC"
    echo "               with the given headnode GZ IP. If not given, this"
    echo "               assumes we are running from the headnode GZ."
}



#---- mainline

trap 'errexit $?' EXIT

TOP=$(cd $(dirname $0)/../; pwd)

#TODO(RELENG-386): set test user: sdcclientstestuser ??
# Options.
opt_test_pattern=
opt_headnode=
while getopts "hf:H:" opt
do
    case "$opt" in
        h)
            usage
            exit 0
            ;;
        f)
            opt_test_pattern=$OPTARG
            ;;
        H)
            opt_headnode=$OPTARG
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done


if [[ -z "$opt_headnode" && $(uname) != "SunOS" ]]; then
    fatal "not running on SunOS (use the '-H headnode' argument to run" \
        "this against a given DC)"
fi

# Production guard
MARKER="/lib/sdc/.sdc-test-no-production-data"
haveMarker=no
if [[ -n "$opt_headnode" ]]; then
    if $(ssh $opt_headnode "test -f $MARKER"); then
        haveMarker=yes
    fi
elif [[ -f "/lib/sdc/.sdc-test-no-production-data" ]]; then
    haveMarker=yes
fi

if [[ "$haveMarker" != "yes" ]]; then
    cat <<EOF
To run this test you must create the file:

    $MARKER

after ensuring you have no production data on this Triton DataCenter.
EOF
    exit 2
fi


# Gather DC setup info for the test files.
if [[ -n "$opt_headnode" ]]; then
    export AMON_IP=$(ssh $opt_headnode 'bash /lib/sdc/config.sh -json | json amon_admin_ips | cut -d, -f1')
    export CNAPI_IP=$(ssh $opt_headnode 'bash /lib/sdc/config.sh -json | json cnapi_admin_ips | cut -d, -f1')
    export CA_IP=$(ssh $opt_headnode 'bash /lib/sdc/config.sh -json | json ca_admin_ips | cut -d, -f1')
    export NAPI_IP=$(ssh $opt_headnode 'bash /lib/sdc/config.sh -json | json napi_admin_ips | cut -d, -f1')
    export VMAPI_IP=$(ssh $opt_headnode 'bash /lib/sdc/config.sh -json | json vmapi_admin_ips | cut -d, -f1')
    export UFDS_ADMIN_UUID=$(ssh $opt_headnode 'bash /lib/sdc/config.sh -json | json ufds_admin_uuid')
    export DSAPI_URL=$(ssh $opt_headnode 'bash /lib/sdc/config.sh -json | json dsapi_url')
    export PAPI_IP=$(ssh $opt_headnode 'bash /lib/sdc/config.sh -json | json papi_admin_ips | cut -d, -f1')
    export CNS_IP=$(ssh $opt_headnode '/opt/smartdc/bin/sdcadm insts cns -j | json 0.ip')
    export MORAY_IP=$(ssh $opt_headnode '/opt/smartdc/bin/sdcadm insts moray -j | json 0.ip')
    # sdcadm insts instance-name doesn't exit with an exit code != 0 if a zone
    # with name "instance-name is not present, so this is safe even if VOLAPI is
    # not setup on the DC where the tests run.
    export VOLAPI_IP=$(ssh $opt_headnode '/opt/smartdc/bin/sdcadm insts volapi -j | json 0.ip')
else
    export AMON_IP=$(bash /lib/sdc/config.sh -json | json amon_admin_ips | cut -d, -f1)
    export CNAPI_IP=$(bash /lib/sdc/config.sh -json | json cnapi_admin_ips | cut -d, -f1)
    export CA_IP=$(bash /lib/sdc/config.sh -json | json ca_admin_ips | cut -d, -f1)
    export NAPI_IP=$(bash /lib/sdc/config.sh -json | json napi_admin_ips | cut -d, -f1)
    export VMAPI_IP=$(bash /lib/sdc/config.sh -json | json vmapi_admin_ips | cut -d, -f1)
    export UFDS_ADMIN_UUID=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)
    export DSAPI_URL=$(bash /lib/sdc/config.sh -json | json dsapi_url)
    export PAPI_IP=$(bash /lib/sdc/config.sh -json | json papi_admin_ips | cut -d, -f1)
    export IMGAPI_IP=$(sdcadm insts imgapi -j | json 0.ip)
    export CNS_IP=$(sdcadm insts cns -j | json 0.ip)
    export MORAY_IP=$(sdcadm insts moray -j | json 0.ip)
    # sdcadm insts instance-name doesn't exit with an exit code != 0 if a zone
    # with name "instance-name is not present, so this is safe even if VOLAPI is
    # not setup on the DC where the tests run.
    export VOLAPI_IP=$(sdcadm insts volapi -j | json 0.ip)
fi

echo ""
echo "# Datacenter config:"
echo "#     AMON_IP is $AMON_IP"
echo "#     CNAPI_IP is $CNAPI_IP"
echo "#     CA_IP is $CA_IP"
echo "#     NAPI_IP is $NAPI_IP"
echo "#     VMAPI_IP is $VMAPI_IP"
echo "#     DSAPI_URL is $DSAPI_URL"
echo "#     UFDS_ADMIN_UUID is $UFDS_ADMIN_UUID"
echo "#     PAPI_IP is $PAPI_IP"
echo "#     CNS_IP is $CNS_IP"
echo "#     MORAY_IP is $MORAY_IP"


echo ""
cd $TOP
test_files=$(ls -1 ./test/*.test.js)
if [[ -n "$opt_test_pattern" ]]; then
    test_files=$(echo "$test_files" | grep "$opt_test_pattern" || true)
    echo "# Running filtered set of test files: $test_files"
fi
if [[ -n "$test_files" ]]; then
    $TOP/node_modules/.bin/tape $test_files
fi
